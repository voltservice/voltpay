name: Inspect OIDC Token Claims
on:
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

jobs:
  inspect-token:
    runs-on: ubuntu-latest
    steps:
      - name: Generate OIDC token with custom audience and decode
        id: oidc
        env:
          AUDIENCE: voltpay-debug
        run: |
          echo "=== Requesting GitHub OIDC token ==="
          # Use the built-in request token/url to mint an ID token for a custom audience
          TOKEN_JSON="$(curl -s -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=${AUDIENCE}")"
          TOKEN="$(echo "$TOKEN_JSON" | jq -r .value)"
          echo "::add-mask::$TOKEN"

          echo "=== Saving JWT to token.jwt ==="
          echo "$TOKEN" > token.jwt

          # Robust base64url decode function (handles padding)
          b64urldecode() {
            local b64=${1//-/+}; b64=${b64//_//};
            local pad=$(( (4 - ${#b64} % 4) % 4 ))
            printf '%s' "$b64" | sed -E "s/$/$(printf '=%.0s' $(seq 1 $pad))/" | base64 -d
          }

          HEADER="$(cut -d '.' -f1 token.jwt)"
          PAYLOAD="$(cut -d '.' -f2 token.jwt)"

          echo "---- HEADER ----"
          b64urldecode "$HEADER" | jq .

          echo "---- PAYLOAD ----"
          b64urldecode "$PAYLOAD" | jq .

          # Outputs (no deprecated set-output)
          {
            echo "jwt_token=$TOKEN"
            echo "payload=$(b64urldecode "$PAYLOAD" | jq -c .)"
          } >> "$GITHUB_OUTPUT"